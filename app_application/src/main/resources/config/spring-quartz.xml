<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
    <!--&lt;!&ndash; 声明任务工厂 &ndash;&gt;-->
    <!--<bean id="scheduler" autowire="no"-->
          <!--class="org.springframework.scheduling.quartz.SchedulerFactoryBean">-->
        <!--&lt;!&ndash; 持久化任务 &ndash;&gt;-->
        <!--&lt;!&ndash; <property name="dataSource" ref="dataSource"/> &ndash;&gt;-->
        <!--&lt;!&ndash; <property name="configLocation" desc="classpath:quartz.properties"/> &ndash;&gt;-->
        <!--&lt;!&ndash;applicationContextSchedulerContextKey： 是org.springframework.scheduling.quartz.SchedulerFactoryBean这个类中-->
            <!--把spring上下 文以key/value的方式存放在了quartz的上下文中了， 可以用applicationContextSchedulerContextKey所定义的key得到对应的spring上下文 &ndash;&gt;-->
        <!--<property name="applicationContextSchedulerContextKey" value="applicationContextKey"/>-->
        <!--<property name="startupDelay" value="30"/>-->
    <!--</bean>-->

    <!--&lt;!&ndash; 调度工厂 &ndash;&gt;-->
    <!--<bean name="startQuartz" lazy-init="true" autowire="no"-->
          <!--class="org.springframework.scheduling.quartz.SchedulerFactoryBean">-->
        <!--<property name="triggers">-->
            <!--<list>-->
                <!--<ref bean="discountTaskJob"/>-->
            <!--</list>-->
        <!--</property>-->
    <!--</bean>-->

    <!--&lt;!&ndash; 定时获取AccessToken start &ndash;&gt;-->
    <!--<bean id="discountTaskJob" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">-->
        <!--<property name="jobDetail" ref="discountTaskJobDetail">-->
        <!--</property>-->
        <!--<property name="cronExpression">-->
            <!--<value>0 30 * * * ? *</value>-->
            <!--&lt;!&ndash;<value>0/10 * * * * ? *</value>&ndash;&gt;-->
        <!--</property>-->
    <!--</bean>-->

    <!--<bean id="discountTaskJobDetail"-->
          <!--class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">-->
        <!--<property name="targetObject" ref="discountTask">-->
        <!--</property>-->
        <!--<property name="targetMethod" value="getToken"></property>-->
        <!--<property name="concurrent" value="false" />-->
        <!--&lt;!&ndash; 是否允许任务并发执行。当值为false时，表示必须等到前一个线程处理完毕后才再启一个新的线程 &ndash;&gt;-->
    <!--</bean>-->

    <!--<bean id="discountTask" class="com.zw.wechat.quartz.AccessTokenTask">-->
    <!--</bean>-->
    <!-- 定时获取AccessToken end -->
</beans>